const fetchArticleContent = () => {
    return new Promise((resolve, reject) => {
        const article = `<p>最早的构想可以追溯到遥远的1980年蒂姆·伯纳斯-李构建的ENQUIRE项目。这是一个类似维基百科的超文本在线编辑数据库。尽管这与我们现在使用的万维网大不相同，但是它们有许多相同的核心思想，甚至还包括一些伯纳斯-李的万维网之后的下一个项目语义网中的构想。</p>
        <p>1989年3月，伯纳斯.李撰写了《关于信息化管理的建议》一文，文中提及ENQUIRE并且描述了一个更加精巧的管理模型[7]。1990年11月12日他和罗伯特·卡里奥合作提出了一个更加正式的关于万维网的建议[8]。在1990年11月13日他在一台NeXT工作站上写了第一个网页以实现他文中的想法[9]。</p>
        <p>在那年的圣诞节，伯纳斯-李制作了要让网络工作的所有必要工具[10]：第一个网页浏览器WorldWideWeb（同时也是网页编辑器）和第一个网页服务器。</p>
        <p>1991年8月6日，他在alt.hypertext新闻组上贴了万维网项目简介的文章[11]。这一天也标志着因特网上万维网公共服务的首次亮相。</p>
        <p>万维网中至关重要的概念─超文本，起源于1960年代的几个从前的项目。譬如泰德·尼尔森的仙那度计划和道格拉斯·英格巴特的NLS。而这两个项目的灵感都是来源于万尼瓦尔·布什在其1945年的论文《和我们想得一样》中为微缩胶片设计的Memex系统。</p>
        <p>蒂姆·伯纳斯-李的另一个才华横溢的突破是将超文本嫁接到因特网上。在他的《编织万维网》一书中解释，他曾多次向技术社群的成员暗示这两种技术结合是可行的，但是却没有任何人接受他的建议，他最后只好自己解决了这个计划。他发明了三项关键技术：URI、HTML、HTTP。</p>
        <p>万维网和其他超文本系统有很多不同之处。万维网上需要单项连接而不是双向连接，这使得任何人可以在资源拥有者不作任何行动情况下链接该资源。和早期的网络系统相比，这一点对于减少实现网络服务器和网络浏览器的困难至关重要，但它的副作用是产生了链接失效的慢性问题。万维网不像某些应用软件如HyperCard，它不是私有的，这使得服务器和客户端能够独立地发展和扩展，而不受许可限制。</p>
        <p>1993年4月30日，欧洲核子研究组织宣布万维网对任何人免费开放，并不收取任何费用[13]。两个月之后Gopher协议宣布不再是免费使用，造成大量用户从Gopher转向万维网。早期流行的网页浏览器是用于Unix和X Windows系统的ViolaWWW。</p>
        <p>罗伯特·卡里奥、尚-弗朗索瓦·阿布拉莫维奇和蒂姆·伯纳斯-李于万维网联盟成立十周年之际</p>
        <p>学者普遍认为，万维网的一个转折点[14]是1993年的Mosaic网页浏览器[15]，这是由伊利诺伊大学厄巴纳-香槟分校（NCSA-UIUC）的国家超级计算机应用中心团队所开发的图形接口浏览器，由马克·安德森领导开发。Mosaic的开发资金来自美国高速运算及通信计划（High-Performance Computing and Communications Initiative）和高速运算及通信法案（High Performance Computing and Communication Act of 1991），这是美国参议员阿尔·戈尔所发起的几个运算发展计划之一[16]。在Mosaic发布之前，图像通常不会与网页中的文字混合，且万维网的受欢迎程度远低于互联网上使用的旧协议，例如Gopher和WAIS。Mosaic的图形使用接口让万维网成为目前最受欢迎的互联网协议。</p>
        <p>1994年10月，万维网联盟（W3C）在麻省理工学院计算机科学实验室成立，创建者是万维网的发明者蒂姆·伯纳斯-李。到了1994年底，全球网站数量仍然相对稀少，但是很多著名网站已经相当活跃，这些网站已经预示或者启发了当今最流行的服务。</p>
        <p>透过互联网连接，世界各地也创建了其他网站。这促进了协议和格式化的国际标准发展。伯纳斯-李继续参与指导万维网标准的发展，例如标记语言来组成网页和他主张的语义网愿景。万维网透过易于使用和灵活的格式在互联网上传播信息，因此对于互联网的普及发挥了重要的作用[17]。虽然这两个术语有时被人们广泛使用，但万维网并不是互联网的代名词[18]。万维网是一个信息空间，包含超链接文档和其他资源，并且由它们的URIs标识[19]。它使用互联网协议如TCP/IP和HTTP作为客户端和服务端软件实现。</p>`;
        resolve({article});
    });
};

export {
    fetchArticleContent
};
